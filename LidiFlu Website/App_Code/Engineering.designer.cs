#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EngineerServices")]
public partial class EngineeringDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCompletedJob(CompletedJob instance);
  partial void UpdateCompletedJob(CompletedJob instance);
  partial void DeleteCompletedJob(CompletedJob instance);
  partial void InsertJob(Job instance);
  partial void UpdateJob(Job instance);
  partial void DeleteJob(Job instance);
  partial void InsertEngineer(Engineer instance);
  partial void UpdateEngineer(Engineer instance);
  partial void DeleteEngineer(Engineer instance);
  #endregion
	
	public EngineeringDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EngineerServicesConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public EngineeringDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EngineeringDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EngineeringDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EngineeringDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<CompletedJob> CompletedJobs
	{
		get
		{
			return this.GetTable<CompletedJob>();
		}
	}
	
	public System.Data.Linq.Table<Job> Jobs
	{
		get
		{
			return this.GetTable<Job>();
		}
	}
	
	public System.Data.Linq.Table<Engineer> Engineers
	{
		get
		{
			return this.GetTable<Engineer>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletedJob")]
public partial class CompletedJob : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _JobID;
	
	private string _EngineerID;
	
	private int _CompletedID;
	
	private EntityRef<Job> _Job;
	
	private EntityRef<Engineer> _Engineer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(string value);
    partial void OnJobIDChanged();
    partial void OnEngineerIDChanging(string value);
    partial void OnEngineerIDChanged();
    partial void OnCompletedIDChanging(int value);
    partial void OnCompletedIDChanged();
    #endregion
	
	public CompletedJob()
	{
		this._Job = default(EntityRef<Job>);
		this._Engineer = default(EntityRef<Engineer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="NChar(10)")]
	public string JobID
	{
		get
		{
			return this._JobID;
		}
		set
		{
			if ((this._JobID != value))
			{
				if (this._Job.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnJobIDChanging(value);
				this.SendPropertyChanging();
				this._JobID = value;
				this.SendPropertyChanged("JobID");
				this.OnJobIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineerID", DbType="NChar(10)")]
	public string EngineerID
	{
		get
		{
			return this._EngineerID;
		}
		set
		{
			if ((this._EngineerID != value))
			{
				if (this._Engineer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEngineerIDChanging(value);
				this.SendPropertyChanging();
				this._EngineerID = value;
				this.SendPropertyChanged("EngineerID");
				this.OnEngineerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CompletedID
	{
		get
		{
			return this._CompletedID;
		}
		set
		{
			if ((this._CompletedID != value))
			{
				this.OnCompletedIDChanging(value);
				this.SendPropertyChanging();
				this._CompletedID = value;
				this.SendPropertyChanged("CompletedID");
				this.OnCompletedIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_CompletedJob", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
	public Job Job
	{
		get
		{
			return this._Job.Entity;
		}
		set
		{
			Job previousValue = this._Job.Entity;
			if (((previousValue != value) 
						|| (this._Job.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Job.Entity = null;
					previousValue.CompletedJobs.Remove(this);
				}
				this._Job.Entity = value;
				if ((value != null))
				{
					value.CompletedJobs.Add(this);
					this._JobID = value.JobID;
				}
				else
				{
					this._JobID = default(string);
				}
				this.SendPropertyChanged("Job");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Engineer_CompletedJob", Storage="_Engineer", ThisKey="EngineerID", OtherKey="EngineerID", IsForeignKey=true)]
	public Engineer Engineer
	{
		get
		{
			return this._Engineer.Entity;
		}
		set
		{
			Engineer previousValue = this._Engineer.Entity;
			if (((previousValue != value) 
						|| (this._Engineer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Engineer.Entity = null;
					previousValue.CompletedJobs.Remove(this);
				}
				this._Engineer.Entity = value;
				if ((value != null))
				{
					value.CompletedJobs.Add(this);
					this._EngineerID = value.EngineerID;
				}
				else
				{
					this._EngineerID = default(string);
				}
				this.SendPropertyChanged("Engineer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _JobID;
	
	private string _JobTitle;
	
	private string _JobDescription;
	
	private string _JobLocation;
	
	private System.Nullable<bool> _Assigned;
	
	private System.Nullable<System.DateTime> _JobDate;
	
	private System.Nullable<bool> _Completed;
	
	private System.Nullable<int> _long;
	
	private System.Nullable<int> _lat;
	
	private EntitySet<CompletedJob> _CompletedJobs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(string value);
    partial void OnJobIDChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnJobLocationChanging(string value);
    partial void OnJobLocationChanged();
    partial void OnAssignedChanging(System.Nullable<bool> value);
    partial void OnAssignedChanged();
    partial void OnJobDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJobDateChanged();
    partial void OnCompletedChanging(System.Nullable<bool> value);
    partial void OnCompletedChanged();
    partial void OnlongChanging(System.Nullable<int> value);
    partial void OnlongChanged();
    partial void OnlatChanging(System.Nullable<int> value);
    partial void OnlatChanged();
    #endregion
	
	public Job()
	{
		this._CompletedJobs = new EntitySet<CompletedJob>(new Action<CompletedJob>(this.attach_CompletedJobs), new Action<CompletedJob>(this.detach_CompletedJobs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string JobID
	{
		get
		{
			return this._JobID;
		}
		set
		{
			if ((this._JobID != value))
			{
				this.OnJobIDChanging(value);
				this.SendPropertyChanging();
				this._JobID = value;
				this.SendPropertyChanged("JobID");
				this.OnJobIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(50)")]
	public string JobTitle
	{
		get
		{
			return this._JobTitle;
		}
		set
		{
			if ((this._JobTitle != value))
			{
				this.OnJobTitleChanging(value);
				this.SendPropertyChanging();
				this._JobTitle = value;
				this.SendPropertyChanged("JobTitle");
				this.OnJobTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="NVarChar(50)")]
	public string JobDescription
	{
		get
		{
			return this._JobDescription;
		}
		set
		{
			if ((this._JobDescription != value))
			{
				this.OnJobDescriptionChanging(value);
				this.SendPropertyChanging();
				this._JobDescription = value;
				this.SendPropertyChanged("JobDescription");
				this.OnJobDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobLocation", DbType="NVarChar(50)")]
	public string JobLocation
	{
		get
		{
			return this._JobLocation;
		}
		set
		{
			if ((this._JobLocation != value))
			{
				this.OnJobLocationChanging(value);
				this.SendPropertyChanging();
				this._JobLocation = value;
				this.SendPropertyChanged("JobLocation");
				this.OnJobLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assigned", DbType="Bit")]
	public System.Nullable<bool> Assigned
	{
		get
		{
			return this._Assigned;
		}
		set
		{
			if ((this._Assigned != value))
			{
				this.OnAssignedChanging(value);
				this.SendPropertyChanging();
				this._Assigned = value;
				this.SendPropertyChanged("Assigned");
				this.OnAssignedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> JobDate
	{
		get
		{
			return this._JobDate;
		}
		set
		{
			if ((this._JobDate != value))
			{
				this.OnJobDateChanging(value);
				this.SendPropertyChanging();
				this._JobDate = value;
				this.SendPropertyChanged("JobDate");
				this.OnJobDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit")]
	public System.Nullable<bool> Completed
	{
		get
		{
			return this._Completed;
		}
		set
		{
			if ((this._Completed != value))
			{
				this.OnCompletedChanging(value);
				this.SendPropertyChanging();
				this._Completed = value;
				this.SendPropertyChanged("Completed");
				this.OnCompletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="long", Storage="_long", DbType="Int")]
	public System.Nullable<int> @long
	{
		get
		{
			return this._long;
		}
		set
		{
			if ((this._long != value))
			{
				this.OnlongChanging(value);
				this.SendPropertyChanging();
				this._long = value;
				this.SendPropertyChanged("@long");
				this.OnlongChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lat", DbType="Int")]
	public System.Nullable<int> lat
	{
		get
		{
			return this._lat;
		}
		set
		{
			if ((this._lat != value))
			{
				this.OnlatChanging(value);
				this.SendPropertyChanging();
				this._lat = value;
				this.SendPropertyChanged("lat");
				this.OnlatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_CompletedJob", Storage="_CompletedJobs", ThisKey="JobID", OtherKey="JobID")]
	public EntitySet<CompletedJob> CompletedJobs
	{
		get
		{
			return this._CompletedJobs;
		}
		set
		{
			this._CompletedJobs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CompletedJobs(CompletedJob entity)
	{
		this.SendPropertyChanging();
		entity.Job = this;
	}
	
	private void detach_CompletedJobs(CompletedJob entity)
	{
		this.SendPropertyChanging();
		entity.Job = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Engineer")]
public partial class Engineer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _EngineerID;
	
	private string _EngineerName;
	
	private EntitySet<CompletedJob> _CompletedJobs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineerIDChanging(string value);
    partial void OnEngineerIDChanged();
    partial void OnEngineerNameChanging(string value);
    partial void OnEngineerNameChanged();
    #endregion
	
	public Engineer()
	{
		this._CompletedJobs = new EntitySet<CompletedJob>(new Action<CompletedJob>(this.attach_CompletedJobs), new Action<CompletedJob>(this.detach_CompletedJobs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineerID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string EngineerID
	{
		get
		{
			return this._EngineerID;
		}
		set
		{
			if ((this._EngineerID != value))
			{
				this.OnEngineerIDChanging(value);
				this.SendPropertyChanging();
				this._EngineerID = value;
				this.SendPropertyChanged("EngineerID");
				this.OnEngineerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineerName", DbType="NChar(10)")]
	public string EngineerName
	{
		get
		{
			return this._EngineerName;
		}
		set
		{
			if ((this._EngineerName != value))
			{
				this.OnEngineerNameChanging(value);
				this.SendPropertyChanging();
				this._EngineerName = value;
				this.SendPropertyChanged("EngineerName");
				this.OnEngineerNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Engineer_CompletedJob", Storage="_CompletedJobs", ThisKey="EngineerID", OtherKey="EngineerID")]
	public EntitySet<CompletedJob> CompletedJobs
	{
		get
		{
			return this._CompletedJobs;
		}
		set
		{
			this._CompletedJobs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CompletedJobs(CompletedJob entity)
	{
		this.SendPropertyChanging();
		entity.Engineer = this;
	}
	
	private void detach_CompletedJobs(CompletedJob entity)
	{
		this.SendPropertyChanging();
		entity.Engineer = null;
	}
}
#pragma warning restore 1591
